import streamlit as st
from tensorflow.keras.models import load_model
import pandas as pd
import numpy as np
import re
import pickle
import nltk
from sklearn.feature_extraction.text import TfidfVectorizer
from nltk.corpus import stopwords
from wordcloud import WordCloud
import matplotlib.pyplot as plt
import plotly.express as px
from fpdf import FPDF
import io
import tempfile
import os
import math  # Importation du module math pour floor()

# ------------------------------
# 1. Configuration de la Page
# ------------------------------

st.set_page_config(
    page_title="üîç Customer Comments Analysis",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded",
)

# ------------------------------
# 2. Importation des Donn√©es et Pr√©traitement
# ------------------------------

# T√©l√©charger les stopwords de NLTK si non d√©j√† t√©l√©charg√©s
nltk.download('stopwords', quiet=True)
stop_words = set(stopwords.words('english'))

def clean_text(text):
    """
    Nettoie le texte en minuscules, supprime les caract√®res non alphanum√©riques,
    les chiffres et les stopwords.
    """
    text = text.lower()
    text = re.sub(r'[^\w\s]', '', text)
    text = re.sub(r'\d+', '', text)
    text = ' '.join(word for word in text.split() if word not in stop_words)
    return text

def calculate_weighted_score(row, alpha=0.04, beta=0.01):
    """
    Calcule un score pond√©r√© bas√© sur le score initial, les likes et les dislikes.
    Utilise une formule unifi√©e pour assurer la consistance.
    """
    weighted_score = row['Score'] * (1 + alpha * row['likes'] - beta * row['dislikes'])
    # Borne du score pond√©r√© entre 1 et 5
    weighted_score = max(1, min(weighted_score, 5))
    # Arrondissement par troncature
    score_final = math.floor(weighted_score)
    return score_final

def clean_comment_for_pdf(text):
    """
    Supprime les caract√®res non-ASCII du texte pour la compatibilit√© PDF.
    """
    text = re.sub(r'[^\x00-\x7F]+', '', text)
    return text

# ------------------------------
# 3. Fonction pour G√©n√©rer le PDF
# ------------------------------

def generate_pdf(visualizations, score_global, recommendation, path="comments_report.pdf"):
    """
    G√©n√®re un rapport PDF contenant les visualisations et leurs commentaires.
    Inclut une recommandation bas√©e sur le score global.
    Supprime automatiquement les fichiers temporaires apr√®s la g√©n√©ration.
    """
    if not visualizations:
        raise ValueError("La liste des visualisations est vide. Aucun PDF ne peut √™tre g√©n√©r√©.")
    
    pdf = FPDF()
    pdf.add_page()
    pdf.set_auto_page_break(auto=True, margin=15)
    
    # Ajouter les variantes de la police DejaVu
    font_path_regular = os.path.join('fonts', 'DejaVuSans.ttf')
    font_path_bold = os.path.join('fonts', 'DejaVuSans-Bold.ttf')
    
    # V√©rifier la pr√©sence des fichiers de police
    if not os.path.exists(font_path_regular):
        raise FileNotFoundError(f"Font file {font_path_regular} not found.")
    if not os.path.exists(font_path_bold):
        raise FileNotFoundError(f"Font file {font_path_bold} not found.")
    
    # Ajouter la police r√©guli√®re et en gras
    pdf.add_font("DejaVu", '', font_path_regular, uni=True)
    pdf.add_font("DejaVu", 'B', font_path_bold, uni=True)
    
    # D√©finir la police par d√©faut
    pdf.set_font("DejaVu", size=12)
    
    # Titre
    pdf.set_font("DejaVu", 'B', 16)
    pdf.cell(0, 10, txt="Customer Comments Analysis Report", ln=True, align='C')
    
    pdf.ln(10)  # Saut de ligne
    
    # Score global ajust√©
    pdf.set_font("DejaVu", 'B', 12)
    pdf.cell(0, 10, txt=f"Adjusted Global Score: {score_global}", ln=True)
    
    # Recommandation bas√©e sur le score global
    pdf.ln(5)  # Petit saut de ligne
    pdf.set_font("DejaVu", 'B', 14)
    pdf.multi_cell(0, 10, txt="üìã Recommandation:")
    pdf.set_font("DejaVu", size=12)
    pdf.multi_cell(0, 10, txt=recommendation)
    
    pdf.ln(10)  # Saut de ligne
    
    # ------------------------------
    # 3.2. Ajouter les Visualisations avec Commentaires
    # ------------------------------
    
    for idx, viz in enumerate(visualizations):
        # V√©rification de la structure de chaque visualisation
        if not isinstance(viz, (list, tuple)) or len(viz) != 2:
            st.warning(f"‚ö†Ô∏è √âl√©ment mal form√© dans 'visualizations' √† l'index {idx} : {viz}")
            continue
        img_path, comment = viz
        # Convertir les backslashes en slashes pour √©viter les probl√®mes avec FPDF
        img_path = img_path.replace('\\', '/')
        if os.path.exists(img_path):
            try:
                # Ajouter le commentaire
                pdf.set_font("DejaVu", 'B', 14)
                pdf.multi_cell(0, 10, txt=comment)
                
                # Ajouter l'image
                pdf.image(img_path, w=190)  # Ajuster la largeur selon vos besoins
                pdf.ln(10)  # Saut de ligne apr√®s chaque image
            except Exception as e:
                st.error(f"‚ùå Erreur lors du traitement de la visualisation {idx + 1} : {e}")
                continue
        else:
            st.warning(f"‚ö†Ô∏è Fichier image manquant pour la visualisation {idx + 1} : {img_path}")
    
    # Sauvegarder le PDF en m√©moire
    try:
        pdf_content = pdf.output(dest='S').encode('latin1')  # Encode en bytes
        pdf_buffer = io.BytesIO(pdf_content)
    except Exception as e:
        raise RuntimeError(f"Erreur lors de la sauvegarde du PDF‚ÄØ: {e}")
    
    # Retourner le buffer pour t√©l√©chargement
    return pdf_buffer

# ------------------------------
# 4. Initialisation de la Session
# ------------------------------

# Initialiser session_state pour les commentaires manuels
if 'manual_comments' not in st.session_state:
    st.session_state.manual_comments = []
if 'manual_likes' not in st.session_state:
    st.session_state.manual_likes = []
if 'manual_dislikes' not in st.session_state:
    st.session_state.manual_dislikes = []

# Initialiser session_state pour les commentaires import√©s
if 'imported_comments' not in st.session_state:
    st.session_state.imported_comments = []
if 'imported_likes' not in st.session_state:
    st.session_state.imported_likes = []
if 'imported_dislikes' not in st.session_state:
    st.session_state.imported_dislikes = []

# Initialiser session_state pour l'engagement de la publication
if 'publication_engagement_submitted' not in st.session_state:
    st.session_state.publication_engagement_submitted = False
if 'total_likes_publication' not in st.session_state:
    st.session_state.total_likes_publication = 0
if 'total_dislikes_publication' not in st.session_state:
    st.session_state.total_dislikes_publication = 0

# Initialiser session_state pour les r√©sultats analys√©s
if 'analyzed_df' not in st.session_state:
    st.session_state.analyzed_df = None
if 'adjusted_global_score' not in st.session_state:
    st.session_state.adjusted_global_score = None
if 'global_recommendation' not in st.session_state:
    st.session_state.global_recommendation = ""

# ------------------------------
# 5. Interface Utilisateur avec Onglets
# ------------------------------

# CSS personnalis√© pour le style
st.markdown("""
    <style>
    .big-font {
        font-size:24px !important;
        color: #4CAF50;
    }
    .medium-font {
        font-size:18px !important;
        color: #2196F3;
    }
    .small-font {
        font-size:14px !important;
        color: #f44336;
    }
    </style>
    """, unsafe_allow_html=True)

# Titre de l'application
st.markdown('<h1 class="big-font">üìà Customer Comments Analysis and Management</h1>', unsafe_allow_html=True)
st.markdown('<p class="medium-font">This application allows you to add and import customer comments, perform in-depth analysis, and generate interactive visualizations along with PDF reports.</p>', unsafe_allow_html=True)

# Cr√©er les onglets
tabs = st.tabs(["üì• Chargement des Commentaires", "üìä R√©sultats", "üé® Tableau de Bord"])

# ------------------------------
# 5.1. Onglet "Chargement des Commentaires"
# ------------------------------
with tabs[0]:
    st.subheader("üì• Chargement des Commentaires")
    
    # Formulaire pour l'engagement de la publication
    with st.form("publication_engagement_form"):
        st.write("### Saisissez les likes et dislikes sur la publication")
        total_likes_publication = st.number_input("üëç Total Likes sur la Publication", min_value=0, step=1, value=0, key="input_total_likes_publication")
        total_dislikes_publication = st.number_input("üëé Total Dislikes sur la Publication", min_value=0, step=1, value=0, key="input_total_dislikes_publication")
        
        submitted_publication = st.form_submit_button("‚úÖ Soumettre l'Engagement de la Publication")
        
        if submitted_publication:
            # Stocker les valeurs dans session_state avec des cl√©s distinctes
            st.session_state.total_likes_publication = int(total_likes_publication)
            st.session_state.total_dislikes_publication = int(total_dislikes_publication)
            st.session_state.publication_engagement_submitted = True
            st.success("‚úÖ Donn√©es d'engagement de la publication soumises avec succ√®s!")
    
    st.markdown("---")
    
    # Formulaire pour ajouter des commentaires manuellement
    with st.form("add_multiple_comments_form"):
        st.write("### Ajouter des Commentaires Manuellement")
        num_manual = st.number_input("Nombre de commentaires √† ajouter", min_value=1, max_value=20, value=1, step=1)
        
        for i in range(int(num_manual)):
            st.markdown(f"**Commentaire {i+1}**")
            comment = st.text_area(f"Commentaire {i+1}", height=80, placeholder="√âcrivez votre commentaire ici...", key=f"manual_comment_{i}")
            likes = st.number_input(f"üëç Likes pour le Commentaire {i+1}", min_value=0, step=1, value=0, key=f"manual_likes_{i}")
            dislikes = st.number_input(f"üëé Dislikes pour le Commentaire {i+1}", min_value=0, step=1, value=0, key=f"manual_dislikes_{i}")
            st.markdown("---")
        
        submitted_manual = st.form_submit_button("üöÄ Ajouter les Commentaires Manuels")
        
        if submitted_manual:
            for i in range(int(num_manual)):
                comment = st.session_state.get(f"manual_comment_{i}", "").strip()
                likes = st.session_state.get(f"manual_likes_{i}", 0)
                dislikes = st.session_state.get(f"manual_dislikes_{i}", 0)
                
                if comment == "":
                    st.warning(f"‚ö†Ô∏è Commentaire {i+1} est vide et sera ignor√©.")
                    continue
                if likes < 0:
                    st.warning(f"‚ö†Ô∏è Les likes pour le Commentaire {i+1} doivent √™tre des entiers positifs. Cette entr√©e sera ignor√©e.")
                    continue
                if dislikes < 0:
                    st.warning(f"‚ö†Ô∏è Les dislikes pour le Commentaire {i+1} doivent √™tre des entiers positifs. Cette entr√©e sera ignor√©e.")
                    continue
                
                st.session_state.manual_comments.append(comment)
                st.session_state.manual_likes.append(int(likes))
                st.session_state.manual_dislikes.append(int(dislikes))
            
            st.success("‚úÖ Commentaires manuels ajout√©s avec succ√®s!")

    st.markdown("---")
    
    # Section pour importer des commentaires depuis un fichier
    st.subheader("üìÇ Importer des Commentaires depuis un Fichier")
    
    uploaded_file = st.file_uploader("Choisissez un fichier CSV ou Excel contenant des commentaires", type=['csv', 'xlsx'])
    
    if uploaded_file is not None:
        try:
            if uploaded_file.name.endswith('.csv'):
                df_imported = pd.read_csv(uploaded_file)
            elif uploaded_file.name.endswith('.xlsx'):
                df_imported = pd.read_excel(uploaded_file)
            else:
                st.error("‚ùå Format de fichier non support√©. Veuillez t√©l√©charger un fichier CSV ou Excel.")
                df_imported = None
            
            if df_imported is not None:
                required_columns = {'Text', 'likes', 'dislikes'}
                if not required_columns.issubset(df_imported.columns):
                    st.error(f"‚ùå Le fichier doit contenir les colonnes suivantes‚ÄØ: {required_columns}")
                else:
                    st.subheader("üîç Aper√ßu des Donn√©es Import√©es")
                    st.dataframe(df_imported.head())
                    
                    # Bouton pour importer les donn√©es
                    if st.button("üì• Importer les Donn√©es"):
                        for index, row in df_imported.iterrows():
                            comment = str(row['Text']).strip()
                            likes = row['likes']
                            dislikes = row['dislikes']
                            
                            if comment == "":
                                st.warning(f"‚ö†Ô∏è Ligne {index + 2}‚ÄØ: Commentaire vide et sera ignor√©.")
                                continue
                            if likes < 0:
                                st.warning(f"‚ö†Ô∏è Ligne {index + 2}‚ÄØ: Les likes doivent √™tre des entiers positifs. Cette ligne sera ignor√©e.")
                                continue
                            if dislikes < 0:
                                st.warning(f"‚ö†Ô∏è Ligne {index + 2}‚ÄØ: Les dislikes doivent √™tre des entiers positifs. Cette ligne sera ignor√©e.")
                                continue
                            
                            st.session_state.imported_comments.append(comment)
                            st.session_state.imported_likes.append(int(likes))
                            st.session_state.imported_dislikes.append(int(dislikes))
                        
                        st.success("‚úÖ Donn√©es import√©es avec succ√®s!")
        except Exception as e:
            st.error(f"‚ùå Une erreur est survenue lors de l'importation du fichier‚ÄØ: {e}")

# ------------------------------
# 5.2. Onglet "R√©sultats"
# ------------------------------
with tabs[1]:
    st.subheader("üìä R√©sultats")
    
    # V√©rifier si les donn√©es de la publication ont √©t√© soumises
    if st.session_state.publication_engagement_submitted:
        # V√©rifier si des commentaires ont √©t√© ajout√©s ou import√©s
        if (st.session_state.manual_comments or st.session_state.imported_comments):
            # Combiner les donn√©es manuelles et import√©es
            data_manual = pd.DataFrame({
                'Text': st.session_state.manual_comments,
                'likes': st.session_state.manual_likes,
                'dislikes': st.session_state.manual_dislikes
            })
            
            data_imported = pd.DataFrame({
                'Text': st.session_state.imported_comments,
                'likes': st.session_state.imported_likes,
                'dislikes': st.session_state.imported_dislikes
            })
            
            data_combined = pd.concat([data_manual, data_imported], ignore_index=True)
            
            st.write(f"**Nombre total de commentaires‚ÄØ:** {data_combined.shape[0]}")
            
            # Bouton pour lancer l'analyse
            if st.button("üîç Lancer l'Analyse"):
                # D√©finir les coefficients pour les likes et dislikes de la publication
                alpha = 0.04  # Coefficient pond√©rant l'impact des likes
                beta = 0.01   # Coefficient pond√©rant l'impact des dislikes
                
                # V√©rifier la pr√©sence des fichiers de police
                font_path = os.path.join('fonts', 'DejaVuSans.ttf')
                font_path_bold = os.path.join('fonts', 'DejaVuSans-Bold.ttf')
                if not os.path.exists(font_path):
                    st.error("‚ùå Le fichier de police DejaVuSans.ttf est manquant. Veuillez le t√©l√©charger et le placer dans le r√©pertoire 'fonts/'.")
                    st.stop()
                if not os.path.exists(font_path_bold):
                    st.error("‚ùå Le fichier de police DejaVuSans-Bold.ttf est manquant. Veuillez le t√©l√©charger et le placer dans le r√©pertoire 'fonts/'.")
                    st.stop()
                else:
                    st.success("‚úÖ Les fichiers de police DejaVuSans.ttf et DejaVuSans-Bold.ttf sont pr√™ts √† √™tre utilis√©s.")
    
                # Charger le mod√®le et le vectoriseur (assurez-vous que les chemins sont corrects)
                try:
                    model = load_model('model_reviews.keras')  # Assurez-vous que le chemin est correct
                    with open('tfidf_vectorizer.pkl', 'rb') as f:
                        vectorizer = pickle.load(f)
                except FileNotFoundError as e:
                    st.error(f"‚ùå Erreur‚ÄØ: Fichier sp√©cifi√© non trouv√©. Veuillez v√©rifier le chemin‚ÄØ: {e.filename}")
                    st.stop()
                except Exception as e:
                    st.error(f"‚ùå Erreur lors du chargement du mod√®le ou du vectoriseur‚ÄØ: {e}")
                    st.stop()
    
                # Nettoyer les textes
                df = data_combined.copy()
                df['Text_cleaned'] = df['Text'].apply(clean_text)
    
                # Transformer les textes nettoy√©s en vecteurs TF-IDF
                X = vectorizer.transform(df['Text_cleaned']).toarray()
    
                # Obtenir les pr√©dictions du mod√®le (scores initiaux de 1 √† 5)
                predictions = model.predict(X)
                df['Score'] = np.argmax(predictions, axis=1) + 1
    
                # Calculer le score final avec la logique conditionnelle et arrondir par troncature
                df['score_final'] = df.apply(lambda row: calculate_weighted_score(row, alpha, beta), axis=1)
    
                # Attribution du sentiment et de la recommandation
                def assign_sentiment_and_recommendation(row):
                    """
                    Assigne le sentiment et la recommandation en fonction du score final.
                    """
                    if row['score_final'] >= 4:
                        sentiment = 'Positive'
                        recommendation = 'Continue providing excellent service!'
                    elif row['score_final'] == 3:
                        sentiment = 'Neutral'
                        recommendation = 'Consider improving certain aspects to increase satisfaction.'
                    else:
                        sentiment = 'Negative'
                        recommendation = 'Identify issues and work on resolving them to enhance customer experience.'
                    return pd.Series([sentiment, recommendation])
    
                df[['Sentiment', 'Recommendation']] = df.apply(assign_sentiment_and_recommendation, axis=1)
    
                # ------------------------------
                # üîÑ Calcul du Score Global Pond√©r√© (M_p) avec likes/dislikes de la publication
                # ------------------------------
                
                # D√©finir le facteur de normalisation delta
                delta_normalization = 5  # Maximum possible score
                
                # Calcul de la moyenne globale mu
                mu = df['score_final'].mean()
                
                # Calcul des poids w_i pour chaque score C_i
                # w_i = 1 - |C_i - mu| / delta_normalization
                # Cela donne des poids plus √©lev√©s aux scores proches de la moyenne
                # et des poids plus faibles aux scores √©loign√©s de la moyenne
                df['weight'] = 1 - (df['score_final'] - mu).abs() / delta_normalization
                df['weight'] = df['weight'].clip(lower=0)  # S'assurer que les poids sont positifs
                
                # Calcul du score global pond√©r√© M_p avec likes/dislikes de la publication
                numerator = (df['score_final'] * df['weight']).sum() + alpha * st.session_state.total_likes_publication - beta * st.session_state.total_dislikes_publication
                denominator = df['weight'].sum() + alpha + beta
                
                if denominator == 0:
                    st.error("‚ùå Le d√©nominateur pour le calcul du score global pond√©r√© est z√©ro.")
                    st.stop()
                
                adjusted_global_score = numerator / denominator
    
                # S'assurer que le score global est entre 1 et 5 et arrondir par troncature
                adjusted_global_score = math.floor(max(1, min(5, adjusted_global_score)))
    
                # D√©finir la recommandation globale bas√©e sur le score global ajust√©
                if adjusted_global_score in [1, 2]:
                    global_recommendation = "‚ùóÔ∏è Urgent am√©liorations n√©cessaires pour augmenter la satisfaction des clients."
                elif adjusted_global_score == 3:
                    global_recommendation = "‚ö†Ô∏è Am√©liorations mod√©r√©es n√©cessaires."
                else:  # 4 ou 5
                    global_recommendation = "‚úÖ Bonne performance. Continuez √† maintenir les standards."
    
                # Stocker le score global ajust√©, la recommandation et le DataFrame analys√© dans session_state
                st.session_state.adjusted_global_score = adjusted_global_score
                st.session_state.global_recommendation = global_recommendation
                st.session_state.analyzed_df = df  # Stocker le DataFrame analys√©
    
                st.success("‚úÖ Analyse effectu√©e avec succ√®s!")
    
        # Afficher les d√©tails des commentaires analys√©s si l'analyse a √©t√© effectu√©e
        if st.session_state.analyzed_df is not None and st.session_state.adjusted_global_score is not None:
            st.markdown("---")
            st.markdown("### üìã D√©tails des Commentaires Analy√©s")
            
            # S√©lectionner les colonnes √† afficher
            comments_table = st.session_state.analyzed_df[['Text', 'likes', 'dislikes', 'Score', 'score_final']].copy()
            comments_table.rename(columns={
                'Text': 'Commentaire',
                'likes': 'Likes',
                'dislikes': 'Dislikes',
                'Score': 'Score Initial',
                'score_final': 'Score Final'
            }, inplace=True)
        
            # Assurer que 'Likes' et 'Dislikes' sont des entiers
            comments_table['Likes'] = comments_table['Likes'].astype(int)
            comments_table['Dislikes'] = comments_table['Dislikes'].astype(int)
        
            # Fonction pour la mise en forme conditionnelle : Mettre en rouge le score final = 1
            def highlight_final_score(val):
                color = 'background-color: red' if val == 1 else ''
                return color
        
            # Appliquer la mise en forme conditionnelle
            styled_table = comments_table.style.applymap(highlight_final_score, subset=['Score Final'])
        
            # Afficher le tableau stylis√©
            st.dataframe(styled_table)
        
            st.markdown("---")
        
            # Bouton pour t√©l√©charger les r√©sultats en CSV
            csv = st.session_state.analyzed_df[['Text', 'likes', 'dislikes', 'Score', 'score_final']].copy()
            csv.rename(columns={
                'Text': 'Commentaire',
                'likes': 'Likes',
                'dislikes': 'Dislikes',
                'Score': 'Score Initial',
                'score_final': 'Score Final'
            }, inplace=True)
            csv_download = csv.to_csv(index=False).encode('utf-8')
            st.download_button(
                label="üì• T√©l√©charger les R√©sultats en CSV",
                data=csv_download,
                file_name='comments_results.csv',
                mime='text/csv',
            )
    else:
        st.info("‚ÑπÔ∏è Veuillez ajouter des commentaires, importer un fichier, et fournir les donn√©es d'engagement de la publication pour lancer l'analyse.")

# ------------------------------
# 5.3. Onglet "Tableau de Bord"
# ------------------------------
with tabs[2]:
    st.subheader("üé® Tableau de Bord")
    
    # V√©rifier si l'analyse a √©t√© effectu√©e
    if st.session_state.analyzed_df is not None and st.session_state.adjusted_global_score is not None:
        df = st.session_state.analyzed_df
        adjusted_global_score = st.session_state.adjusted_global_score
        global_recommendation = st.session_state.global_recommendation
        
        # ------------------------------
        # 10. Affichage des Indicateurs Cl√©s (KPIs) Am√©lior√©
        # ------------------------------
        
        st.markdown("### üìà Indicateurs Cl√©s de Performance (KPIs)")
        
        # D√©finir les donn√©es des KPIs
        kpis = {
            "üìä Adjusted Global Score": f"{adjusted_global_score}" if adjusted_global_score is not None else "N/A",
            "üëç Total Likes on Comments": f"{df['likes'].sum()}",
            "üëé Total Dislikes on Comments": f"{df['dislikes'].sum()}",
            "üëç Total Likes on Publication": f"{st.session_state.total_likes_publication}",
            "üëé Total Dislikes on Publication": f"{st.session_state.total_dislikes_publication}"
        }
        
        # D√©finir les couleurs pour chaque KPI
        colors = {
            "üìä Adjusted Global Score": "#4CAF50",  # Vert
            "üëç Total Likes on Comments": "#2196F3",  # Bleu
            "üëé Total Dislikes on Comments": "#f44336",  # Rouge
            "üëç Total Likes on Publication": "#FFC107",  # Jaune
            "üëé Total Dislikes on Publication": "#9C27B0"  # Violet
        }
        
        # Calculer le nombre de colonnes par ligne (par exemple, 3 KPIs par ligne)
        cols_per_row = 3
        rows = (len(kpis) + cols_per_row - 1) // cols_per_row  # Calcul du nombre de lignes n√©cessaires
        
        # G√©n√©rer les lignes de KPIs
        kpi_items = list(kpis.items())
        for row in range(rows):
            cols = st.columns(cols_per_row)
            for col in range(cols_per_row):
                index = row * cols_per_row + col
                if index < len(kpi_items):
                    kpi_name, kpi_value = kpi_items[index]
                    color = colors.get(kpi_name, "#FFFFFF")  # Couleur par d√©faut blanche si non d√©fini
                    
                    # HTML/CSS pour styliser chaque KPI avec des tailles r√©duites
                    kpi_html = f"""
                    <div style="
                        background-color: {color};
                        color: white;
                        padding: 10px;
                        border-radius: 8px;
                        text-align: center;
                        box-shadow: 2px 2px 8px rgba(0,0,0,0.1);
                        display: flex;
                        flex-direction: column;
                        justify-content: center;
                    ">
                        <h3 style="margin: 0; font-size: 1.2em;">{kpi_name}</h3>
                        <h2 style="margin: 0; font-size: 2em;">{kpi_value}</h2>
                    </div>
                    """
                    cols[col].markdown(kpi_html, unsafe_allow_html=True)
        
        st.markdown("---")
        
        # ------------------------------
        # 11. G√©n√©ration des Visualisations (Tableau de Bord)
        # ------------------------------
        
        st.markdown("### üìä Visualisations Interactives")
        
        visualizations = []  # Liste pour stocker les tuples (chemin_image, commentaire)
        
        # Organiser les visualisations en colonnes
        col1, col2 = st.columns(2)
        
        with col1:
            # 1. Graphique en Barres des Likes et Dislikes Totaux sur les Commentaires
            df_bar = pd.DataFrame({
                'Type': ['Likes', 'Dislikes'],
                'Count': [df['likes'].sum(), df['dislikes'].sum()]
            })
            
            fig1 = px.bar(
                df_bar,
                x='Type',
                y='Count',
                labels={'Type': 'Type', 'Count': 'Nombre'},
                title='üî∫ Total Likes et Dislikes sur les Commentaires',
                color='Type',
                color_discrete_map={'Likes': '#2E8B57', 'Dislikes': '#FF6347'},  # Couleurs personnalis√©es
                hover_data={'Type': True, 'Count': True}
            )
            fig1.update_layout(showlegend=False, plot_bgcolor='rgba(0,0,0,0)')
            st.plotly_chart(fig1, use_container_width=True)
            
            # Commentaire pour cette visualisation
            comment1 = "üî∫ Ce graphique en barres affiche le nombre total de likes et de dislikes re√ßus par les commentaires. Un nombre √©lev√© de likes indique une satisfaction g√©n√©rale des clients, tandis que les dislikes peuvent mettre en √©vidence des domaines √† am√©liorer."
            
            # Sauvegarder la figure en image temporaire
            with tempfile.NamedTemporaryFile(suffix=".png", delete=False) as tmpfile:
                fig1.write_image(tmpfile.name)
                visualizations.append((tmpfile.name, comment1))
        
        with col2:
            # 2. Graphique en Secteurs pour la R√©partition des Sentiments
            sentiment_counts = df['Sentiment'].value_counts().reset_index()
            sentiment_counts.columns = ['Sentiment', 'Count']
            fig_pie = px.pie(
                sentiment_counts,
                names='Sentiment',
                values='Count',
                title='üç∞ R√©partition des Sentiments',
                color='Sentiment',
                color_discrete_map={'Positive': '#32CD32', 'Neutral': '#808080', 'Negative': '#DC143C'}
            )
            fig_pie.update_traces(textposition='inside', textinfo='percent+label')
            st.plotly_chart(fig_pie, use_container_width=True)
            
            # Commentaire pour cette visualisation
            comment2 = "üç∞ Ce graphique en secteurs illustre la r√©partition des sentiments exprim√©s dans les commentaires. Une majorit√© de sentiments positifs indique une haute satisfaction, tandis que les sentiments n√©gatifs mettent en √©vidence des domaines n√©cessitant une am√©lioration."
            
            # Sauvegarder la figure en image temporaire
            with tempfile.NamedTemporaryFile(suffix=".png", delete=False) as tmpfile:
                fig_pie.write_image(tmpfile.name)
                visualizations.append((tmpfile.name, comment2))
        
        # Nouvelle ligne de visualisations
        col3, col4 = st.columns(2)
        
        with col3:
            # 3. Treemap pour la Distribution des Scores Finaux
            score_counts = df['score_final'].value_counts().reset_index()
            score_counts.columns = ['Score Final', 'Count']
            fig3 = px.treemap(
                score_counts,
                path=['Score Final'],
                values='Count',
                title='üó∫Ô∏è Distribution des Scores Finaux',
                color='Count',
                color_continuous_scale='RdBu'
            )
            fig3.update_layout(plot_bgcolor='rgba(0,0,0,0)')
            st.plotly_chart(fig3, use_container_width=True)
            
            # Commentaire pour cette visualisation
            comment3 = "üó∫Ô∏è Ce treemap repr√©sente la distribution des scores finaux attribu√©s aux commentaires. Il offre une vue intuitive de la fr√©quence de chaque score, aidant √† identifier rapidement les tendances g√©n√©rales dans les √©valuations des clients."
            
            # Sauvegarder la figure en image temporaire
            with tempfile.NamedTemporaryFile(suffix=".png", delete=False) as tmpfile:
                fig3.write_image(tmpfile.name)
                visualizations.append((tmpfile.name, comment3))
        
        with col4:
            # 4. Histogramme Interactif des Scores
            if pd.api.types.is_numeric_dtype(df['score_final']):
                unique_scores = df['score_final'].unique()
                if len(unique_scores) <= 10:
                    # Utiliser des couleurs discr√®tes
                    fig_hist = px.histogram(
                        df,
                        x='score_final',
                        nbins=5,
                        title='üìä Distribution des Scores Finaux',
                        labels={'score_final': 'Score Final'},
                        color='score_final',
                        color_discrete_sequence=px.colors.sequential.Viridis
                    )
                else:
                    # Utiliser des couleurs continues
                    fig_hist = px.histogram(
                        df,
                        x='score_final',
                        nbins=20,
                        title='üìà Distribution des Scores Finaux',
                        labels={'score_final': 'Score Final'},
                        color='score_final',
                        color_continuous_scale='Viridis'
                    )
            else:
                # Si 'score_final' n'est pas num√©rique, omettre la couleur
                fig_hist = px.histogram(
                    df,
                    x='score_final',
                    nbins=5,
                    title='üìâ Distribution des Scores Finaux',
                    labels={'score_final': 'Score Final'}
                )
            
            try:
                fig_hist.update_layout(showlegend=False, plot_bgcolor='rgba(0,0,0,0)')
                st.plotly_chart(fig_hist, use_container_width=True)
                
                # Commentaire pour cette visualisation
                comment4 = "üìä Cet histogramme montre la distribution des scores finaux attribu√©s aux commentaires. Il permet de visualiser la fr√©quence de chaque score et d'identifier les tendances g√©n√©rales dans les √©valuations des clients."
                
                # Sauvegarder la figure en image temporaire
                with tempfile.NamedTemporaryFile(suffix=".png", delete=False) as tmpfile:
                    fig_hist.write_image(tmpfile.name)
                    visualizations.append((tmpfile.name, comment4))
            except TypeError as e:
                st.error(f"‚ùå Erreur lors de la cr√©ation de l'histogramme‚ÄØ: {e}")
                # Optionnel : Afficher un histogramme simple sans couleur
                fig_hist_simple = px.histogram(
                    df,
                    x='score_final',
                    nbins=5,
                    title='üìâ Distribution des Scores Finaux',
                    labels={'score_final': 'Score Final'}
                )
                fig_hist_simple.update_layout(showlegend=False, plot_bgcolor='rgba(0,0,0,0)')
                st.plotly_chart(fig_hist_simple, use_container_width=True)
                
                # Commentaire pour l'histogramme simple
                comment4_simple = "üìâ Cet histogramme repr√©sente la distribution des scores finaux. Il offre une vue simplifi√©e de la fr√©quence de chaque score, facilitant l'analyse des tendances g√©n√©rales."
                
                # Sauvegarder l'histogramme simple en image temporaire
                with tempfile.NamedTemporaryFile(suffix=".png", delete=False) as tmpfile:
                    fig_hist_simple.write_image(tmpfile.name)
                    visualizations.append((tmpfile.name, comment4_simple))
        
        # ------------------------------
        # 12. Word Cloud
        # ------------------------------
        
        st.markdown("### ‚òÅÔ∏è Word Cloud des Commentaires")
        all_text = ' '.join(df['Text_cleaned'])
        wordcloud = WordCloud(width=800, height=400, background_color='white', colormap='viridis').generate(all_text)
        
        fig_wc, ax_wc = plt.subplots(figsize=(10, 5))
        ax_wc.imshow(wordcloud, interpolation='bilinear')
        ax_wc.axis('off')
        ax_wc.set_title('‚òÅÔ∏è Word Cloud des Commentaires')
        st.pyplot(fig_wc)
        
        # Commentaire pour le Word Cloud
        comment5 = "‚òÅÔ∏è Le Word Cloud affiche les mots les plus fr√©quents pr√©sents dans les commentaires. Les mots plus grands apparaissent plus souvent, offrant un aper√ßu rapide des th√®mes r√©currents et des pr√©occupations des clients."
        
        # Sauvegarder le Word Cloud en image temporaire
        with tempfile.NamedTemporaryFile(suffix=".png", delete=False) as tmpfile:
            fig_wc.savefig(tmpfile.name, format='png')
            visualizations.append((tmpfile.name, comment5))
        
        st.markdown("---")
        
        # ------------------------------
        # 13. G√©n√©ration et T√©l√©chargement du PDF
        # ------------------------------
        
        st.markdown("### üìÑ G√©n√©rer et T√©l√©charger le Rapport PDF")
        
        if st.button("üìÑ G√©n√©rer le Rapport PDF"):
            try:
                if not visualizations:
                    st.error("‚ùå La liste des visualisations est vide. Ajoutez des visualisations avant de g√©n√©rer le PDF.")
                else:
                    pdf_buffer = generate_pdf(visualizations, adjusted_global_score, global_recommendation)
                    st.download_button(
                        label="üì• T√©l√©charger le Rapport PDF",
                        data=pdf_buffer.getvalue(),  # Obtenir les bytes du buffer
                        file_name='comments_report.pdf',
                        mime='application/pdf',
                    )
                    st.success("‚úÖ Rapport PDF g√©n√©r√© avec succ√®s!")
                    
                    # Nettoyer les fichiers temporaires automatiquement
                    for img_path, _ in visualizations:
                        try:
                            os.remove(img_path)
                        except Exception as e:
                            st.warning(f"‚ö†Ô∏è Impossible de supprimer le fichier temporaire {img_path}‚ÄØ: {e}")
            except ValueError as ve:
                st.error(f"‚ùå Erreur lors de la g√©n√©ration du PDF‚ÄØ: {ve}")
            except Exception as e:
                st.error(f"‚ùå Une erreur est survenue lors de la g√©n√©ration du PDF‚ÄØ: {e}")
        
        # ------------------------------
        # 14. Affichage du R√©sum√© des R√©sultats
        # ------------------------------
        
        st.markdown("---")
        st.markdown("### üìã R√©sum√© des R√©sultats")
        st.write(f"**üìä Adjusted Global Score‚ÄØ:** {adjusted_global_score}")
        st.write(f"**üìù Recommandation‚ÄØ:** {global_recommendation}")
    
    else:
        st.info("‚ÑπÔ∏è Veuillez lancer l'analyse en ajoutant des commentaires et en fournissant les donn√©es d'engagement de la publication.")
